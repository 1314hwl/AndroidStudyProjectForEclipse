Marshmallow(棉花糖)6.0新特性

Android 6.0 Changes
Along with new features and capabilities, Android 6.0 (API level 23) includes a variety of system changes and API behavior changes. This document highlights some of the key changes that you should understand and account for in your apps.
随着新的特性和功能,Android 6.0(API级别23)包括各种系统变化和API的行为变化。本文强调一些关键的变化,你应该理解和考虑在你的应用程序。
If you have previously published an app for Android, be aware that these changes in the platform affect your app.
如果你有以前发表的Android应用程序,请注意,这些变化在影响你的应用程序平台。
Runtime Permissions
This release introduces a new permissions model, where users can now directly manage app permissions at runtime. This model gives users improved visibility and control over permissions, while streamlining the installation and auto-update processes for app developers. Users can grant or revoke permissions individually for installed apps.
这个版本引入了一个新的权限模型,用户现在可以在运行时直接管理应用程序的权限。这个模型提供了改进的可见性和控制用户权限,同时简化安装和自动升级过程对于应用程序开发人员。用户可以授予或撤销权限单独安装的应用程序。
On your apps that target Android 6.0 (API level 23) or higher, make sure to check for and request permissions at runtime. To determine if your app has been granted a permission, call the new checkSelfPermission() method. To request a permission, call the new requestPermissions() method. Even if your app is not targeting Android 6.0 (API level 23), you should test your app under the new permissions model.
在你的应用程序的目标Android 6.0(API级别23)或更高,确保在运行时检查和请求权限。来确定应用程序已经被授予权限,调用新的checkSelfPermission()方法。请求权限,调用新的requestPermissions()方法。即使你的应用程序并不是针对Android 6.0(API级别23),你应该测试你的应用在新的权限模型。
For details on supporting the new permissions model in your app, see Working with System Permissions. For tips on how to assess the impact on your app, see Permissions Best Practices.
有关支持新的权限模型在你的应用程序,使用系统权限。对如何评估对应用程序的影响,看到权限最佳实践。
Doze and App Standby瞌睡和应用备用
This release introduces new power-saving optimizations for idle devices and apps. These features affect all apps so make sure to test your apps in these new modes.
这个版本引入了新的节能优化闲置设备和应用程序。这些特性影响所有应用程序确保测试您的应用程序在这些新模式。
Doze: If a user unplugs a device and leaves it stationary, with its screen off, for a period of time, the device goes into Doze mode, where it attempts to keep the system in a sleep state. In this mode, devices periodically resume normal operations for brief periods of time so that app syncing can occur and the system can perform any pending operations.
打瞌睡:如果用户拔掉设备和树叶它静止不动的,与它的屏幕,在一段时间内,该设备进入瞌睡模式,它试图保持系统处于睡眠状态。在这种模式下,设备周期性地短暂恢复正常操作的时间,以便应用程序同步发生,系统可以执行任何悬而未决的操作。
App Standby: App Standby allows the system to determine that an app is idle when the user is not actively using it. The system makes this determination when the user does not touch the app for a certain period of time. If the device is unplugged, the system disables network access and suspends syncs and jobs for the apps it deems idle.
应用备用:应用备用允许系统确定应用程序空闲当用户不积极使用它。系统使这一决心当用户不接触一段时间的应用。如果设备不插电,系统禁用网络访问和暂停同步应用程序认为空闲和工作。
To learn more about these power-saving changes, see Optimizing for Doze and App Standby.
了解更多关于这些省电的变化,看到打瞌睡的优化和应用备用。
Apache HTTP Client Removal
Apache HTTP客户端删除
Android 6.0 release removes support for the Apache HTTP client. If your app is using this client and targets Android 2.3 (API level 9) or higher, use the HttpURLConnection class instead. This API is more efficient because it reduces network use through transparent compression and response caching, and minimizes power consumption. To continue using the Apache HTTP APIs, you must first declare the following compile-time dependency in your build.gradle file:
Android 6.0版本将支持Apache HTTP客户端。如果你的应用程序使用此客户端和目标Android 2.3(API级别9)或更高,使用HttpURLConnection类。这个API是更有效的,因为它通过透明的压缩和响应缓存,减少网络使用和减少能耗。继续使用Apache HTTP api,你必须首先声明以下编译时依赖项。gradle文件:
android {
    useLibrary 'org.apache.http.legacy'
}
BoringSSL
Android is moving away from OpenSSL to the BoringSSL library. If you’re using the Android NDK in your app, don't link against cryptographic libraries that are not a part of the NDK API, such as libcrypto.so and libssl.so. These libraries are not public APIs, and may change or break without notice across releases and devices. In addition, you may expose yourself to security vulnerabilities. Instead, modify your native code to call the Java cryptography APIs via JNI or to statically link against a cryptography library of your choice.
Android是BoringSSL远离OpenSSL库。如果你在你的应用程序,使用Android NDK对加密库不是不联系NDK API的一部分,比如libcrypto。所以,libssl.so。这些库不是公共api,并可能改变或打破跨版本和设备不另行通知。此外,你可能会暴露自己的安全漏洞。相反,修改您的本机代码调用Java加密api通过JNI或静态链接对您选择的密码库。
Access to Hardware Identifier
访问硬件标识符
To provide users with greater data protection, starting in this release, Android removes programmatic access to the device’s local hardware identifier for apps using the Wi-Fi and Bluetooth APIs. The WifiInfo.getMacAddress() and the BluetoothAdapter.getAddress() methods now return a constant value of 02:00:00:00:00:00.
为用户提供更大的数据保护,开始在本版本中,Android将编程访问设备的本地硬件标识符使用wi - fi和蓝牙api的应用程序。BluetoothAdapter.getAddress WifiInfo.getMacAddress()和()方法返回02:00:00:00:00:00恒定值。
To access the hardware identifiers of nearby external devices via Bluetooth and Wi-Fi scans, your app must now have the ACCESS_FINE_LOCATION or ACCESS_COARSE_LOCATION permissions:
访问硬件标识符附近的外部设备通过蓝牙和无线网络扫描,应用程序必须现在ACCESS_FINE_LOCATION或者ACCESS_COARSE_LOCATION权限:
WifiManager.getScanResults()
BluetoothDevice.ACTION_FOUND
BluetoothLeScanner.startScan()
Note: When a device running Android 6.0 (API level 23) initiates a background Wi-Fi or Bluetooth scan, the operation is visible to external devices as originating from a randomized MAC address.
注意:当设备运行Android 6.0(API级别23)发起一个背景wi - fi或蓝牙扫描,操作是可见的外部设备,来自一个随机的MAC地址。
Notifications
This release removes the Notification.setLatestEventInfo() method. Use the Notification.Builder class instead to construct notifications. To update a notification repeatedly, reuse the Notification.Builder instance. Call the build() method to get updated Notification instances.
这个版本删除Notification.setLatestEventInfo()方法。使用通知。构建器类来构建通知。反复更新通知,通知重用。构建器实例。调用build()方法来获取更新通知实例。
The adb shell dumpsys notification command no longer prints out your notification text. Use the adb shell dumpsys notification --noredact command instead to print out the text in a notification object.
亚行壳dumpsys通知命令不再打印出你的通知文本。使用亚行壳dumpsys通知――noredact命令而不是打印的文本通知对象。
AudioManager Changes
Setting the volume directly or muting specific streams via the AudioManager class is no longer supported. The setStreamSolo() method is deprecated, and you should call the requestAudioFocus() method instead. Similarly, the setStreamMute() method is deprecated; instead, call the adjustStreamVolume() method and pass in the direction value ADJUST_MUTE or ADJUST_UNMUTE.
设置音量直接或通过AudioManager静音特定流类是不再支持。setStreamSolo()方法是弃用,你应该叫requestAudioFocus()方法。同样,setStreamMute()方法是弃用;相反,称为adjustStreamVolume()方法并传递价值ADJUST_MUTE或者ADJUST_UNMUTE的方向。
Text Selection

When users select text in your app, you can now display text selection actions such as Cut, Copy, and Paste in a floating toolbar. The user interaction implementation is similar to that for the contextual action bar, as described in Enabling the contextual action mode for individual views.
当用户选择文本在你的应用程序,现在您可以显示文本选择行为,如剪切、复制和粘贴在一个浮动工具栏。用户交互实现类似于上下文操作栏,使所述上下文动作模式为个人观点。
To implement a floating toolbar for text selection, make the following changes in your existing apps:
实现浮动工具栏的文本选择,在你现有的应用程序做以下更改:
In your View or Activity object, change your ActionMode calls from startActionMode(Callback) to startActionMode(Callback, ActionMode.TYPE_FLOATING).
Take your existing implementation of ActionMode.Callback and make it extend ActionMode.Callback2 instead.
Override the onGetContentRect() method to provide the coordinates of the content Rect object (such as a text selection rectangle) in the view.
If the rectangle positioning is no longer valid, and this is the only element to be invalidated, call the invalidateContentRect() method.
If you are using Android Support Library revision 22.2, be aware that floating toolbars are not backward-compatible and appcompat takes control over ActionMode objects by default. This prevents floating toolbars from being displayed. To enable ActionMode support in an AppCompatActivity, call getDelegate(), then call setHandleNativeActionModesEnabled() on the returned AppCompatDelegate object and set the input parameter to false. This call returns control of ActionMode objects to the framework. In devices running Android 6.0 (API level 23), that allows the framework to support ActionBar or floating toolbar modes, while on devices running Android 5.1 (API level 22) or lower, only the ActionBar modes are supported.
在你的视图或活动对象,改变你ActionMode startActionMode打来(回调)startActionMode(回调,ActionMode.TYPE_FLOATING)。
把你现有的ActionMode的实现。回调,让它延长ActionMode。Callback2代替。
覆盖onGetContentRect()方法提供的坐标内容矩形对象(如文本选择矩形)的观点。
如果矩形定位不再是有效的,这是唯一的元素失效,称之为invalidateContentRect()方法。
如果您使用的是Android支持库版本22.2,请注意,浮动工具栏不向后兼容和appcompat需要控制ActionMode默认对象。这可以防止浮动工具栏显示。以AppCompatActivity启用ActionMode支持,叫getDelegate(),然后调用setHandleNativeActionModesEnabled()返回的AppCompatDelegate对象和输入参数设置为false。这个调用返回控制ActionMode对象的框架。在设备运行Android 6.0(API级别23),允许框架支持ActionBar或浮动工具栏模式,在设备上运行Android 5.1(API级别22)或更低,只有ActionBar模式支持。
Browser Bookmark Changes
This release removes support for global bookmarks. The android.provider.Browser.getAllBookmarks() and android.provider.Browser.saveBookmark() methods are now removed. Likewise, the READ_HISTORY_BOOKMARKS and WRITE_HISTORY_BOOKMARKS permissions are removed. If your app targets Android 6.0 (API level 23) or higher, don't access bookmarks from the global provider or use the bookmark permissions. Instead, your app should store bookmarks data internally.
这个版本将支持全球书签。android.provider.Browser.getAllBookmarks()和android.provider.Browser.saveBookmark()方法现在移除。同样,READ_HISTORY_BOOKMARKS,WRITE_HISTORY_BOOKMARKS权限删除。如果你的应用目标Android 6.0(API级别23)或更高,不从全球供应商访问书签书签或使用权限。相反,应用程序应该在内部存储书签数据。
Android Keystore Changes
With this release, the Android Keystore provider no longer supports DSA. ECDSA is still supported.
有了这个版本,安卓不再支持DSA密钥库提供者。ECDSA仍支持。
Keys which do not require encryption at rest will no longer be deleted when secure lock screen is disabled or reset (for example, by the user or a Device Administrator). Keys which require encryption at rest will be deleted during these events.
键,不需要加密静止不再禁用安全锁定屏幕或重置时删除(例如,由用户或设备管理员)。钥匙需要加密静止在这些事件将被删除。
Wi-Fi and Networking Changes
This release introduces the following behavior changes to the Wi-Fi and networking APIs.
这个版本引入了以下行为改变无线和网络api。
Your apps can now change the state of WifiConfiguration objects only if you created these objects. You are not permitted to modify or delete WifiConfiguration objects created by the user or by other apps.
Previously, if an app forced the device to connect to a specific Wi-Fi network by using enableNetwork() with the disableAllOthers=true setting, the device disconnected from other networks such as cellular data. In This release, the device no longer disconnects from such other networks. If your app’s targetSdkVersion is “20” or lower, it is pinned to the selected Wi-Fi network. If your app’s targetSdkVersion is “21” or higher, use the multinetwork APIs (such as openConnection(), bindSocket(), and the new bindProcessToNetwork() method) to ensure that its network traffic is sent on the selected network.
Camera Service Changes
In This release, the model for accessing shared resources in the camera service has been changed from the previous “first come, first serve” access model to an access model where high-priority processes are favored. Changes to the service behavior include:
您的应用程序现在可以改变WifiConfiguration对象的状态只有在您创建这些对象。你不允许修改或删除WifiConfiguration对象创建的用户或其他应用程序。
以前,如果一个应用程序迫使设备连接到一个特定的wi - fi网络通过使用enableNetwork与disableAllOthers = true()设置,设备与其他诸如蜂窝数据网络。在本版本中,设备不再从其他网络断开。如果你的应用的targetSdkVersion“20”或更低,这是固定在选定的wi - fi网络。如果你的应用的targetSdkVersion“21”或更高,使用multinetwork api(比如openConnection(),bindSocket(),和新bindProcessToNetwork()方法),以确保其网络流量所选网络上发送。
相机服务更改
在本版本中,该模型用于访问共享资源在相机服务改变了从以前的“先来先得”访问模型一个高优先级进程支持的访问模型。更改服务行为包括:
Access to camera subsystem resources, including opening and configuring a camera device, is awarded based on the “priority” of the client application process. Application processes with user-visible or foreground activities are generally given a higher-priority, making camera resource acquisition and use more dependable.
Active camera clients for lower priority apps may be “evicted” when a higher priority application attempts to use the camera. In the deprecated Camera API, this results in onError() being called for the evicted client. In the Camera2 API, it results in onDisconnected() being called for the evicted client.
On devices with appropriate camera hardware, separate application processes are able to independently open and use separate camera devices simultaneously. However, multi-process use cases, where simultaneous access causes significant degradation of performance or capabilities of any of the open camera devices, are now detected and disallowed by the camera service. This change may result in “evictions” for lower priority clients even when no other app is directly attempting to access the same camera device.
Changing the current user causes active camera clients in apps owned by the previous user account to be evicted. Access to the camera is limited to user profiles owned by the current device user. In practice, this means that a “Guest” account, for example, will not be able to leave running processes that use the camera subsystem when the user has switched to a different account.
进入相机子系统资源,包括打开和配置一个摄像头设备,获得基于客户端应用程序的“优先级”的过程。应用程序进程和用户可见或前台活动通常是给定一个高优先级,使相机资源获取和使用更可靠。
活跃相机客户低优先级的应用可能会“驱逐”当一个更高的优先级应用程序试图使用相机。弃用的摄像头API,这导致onError驱逐客户机()被调用。在Camera2 API,它导致onDisconnected驱逐客户机()被调用。
与合适的相机硬件设备上,单独的应用程序进程能够独立开放和同时使用独立的摄像头设备。然而,多进程的用例,同时访问造成重大降解性能或功能的打开摄像头设备,现在相机服务发现和不允许的。这种变化可能导致“驱逐”为低优先级的客户,即使在没有其他应用直接尝试访问相同的摄像头设备。
改变当前用户原因活跃相机的客户应用程序由以前的用户帐户被驱逐。进入相机是有限的用户配置文件属于当前用户设备。在实践中,这意味着一个“客人”帐户,例如,将无法离开运行过程时使用相机子系统用户切换到一个不同的帐户。
Runtime

The ART runtime now properly implements access rules for the newInstance() method. This change fixes a problem where Dalvik was checking access rules incorrectly in previous versions. If your app uses the newInstance() method and you want to override access checks, call the setAccessible() method with the input parameter set to true. If your app uses the v7 appcompat library or the v7 recyclerview library, you must update your app to use to the latest versions of these libraries. Otherwise, make sure that any custom classes referenced from XML are updated so that their class constructors are accessible.
艺术现在运行时正确实现访问规则的newInstance()方法。这种变化修复一个问题在Dalvik检查访问规则错误在之前的版本。如果您的应用程序使用newInstance()方法和你想覆盖访问检查,称为种setAccessible()方法的输入参数设置为true。如果您的应用程序使用v7 appcompat库或v7 recyclerview库,您必须更新您的应用程序使用这些库的最新版本。否则,确保任何定制类引用XML更新这类构造函数访问。
This release updates the behavior of the dynamic linker. The dynamic linker now understands the difference between a library’s soname and its path ( public bug 6670), and search by soname is now implemented. Apps which previously worked that have bad DT_NEEDED entries (usually absolute paths on the build machine’s file system) may fail when loaded.
这个版本更新动态链接器的行为。动态链接器现在了解图书馆的soname和路径的区别(6670年公共错误),和搜索的soname现在实现的。应用程序之前,有坏DT_NEEDED条目(通常是绝对路径构建机器上的文件系统)加载时可能会失败。
The dlopen(3) RTLD_LOCAL flag is now correctly implemented. Note that RTLD_LOCAL is the default, so calls to dlopen(3) that didn’t explicitly use RTLD_LOCAL will be affected (unless your app explicitly used RTLD_GLOBAL). With RTLD_LOCAL, symbols will not be made available to libraries loaded by later calls to dlopen(3) (as opposed to being referenced by DT_NEEDED entries).
dlopen(3)RTLD_LOCAL国旗现在正确地执行。注意,RTLD_LOCAL是默认的,所以呼吁dlopen(3)没有明确使用RTLD_LOCAL会受到影响(除非你的应用程序显式地使用RTLD_GLOBAL)。RTLD_LOCAL,符号将不会提供给库装入后调用dlopen(3)(而不是被DT_NEEDED引用条目)。
On previous versions of Android, if your app requested the system to load a shared library with text relocations, the system displayed a warning but still allowed the library to be loaded. Beginning in this release, the system rejects this library if your app's target SDK version is 23 or higher. To help you detect if a library failed to load, your app should log the dlopen(3) failure, and include the problem description text that the dlerror(3) call returns. To learn more about handling text relocations, see this guide.
在以前版本的Android系统,如果您的应用程序请求系统加载共享库搬迁与文本,系统显示一个警告,但仍允许图书馆被加载。开始在本版本中,系统拒绝这个库如果你的应用程序的目标SDK版本是23或更高。帮助你发现如果一个库加载失败,您的应用程序应该记录dlopen(3)失败,并包括问题描述文本dlerror(3)调用返回。了解更多关于处理文本搬迁,请参阅本指南。
APK Validation
The platform now performs stricter validation of APKs. An APK is considered corrupt if a file is declared in the manifest but not present in the APK itself. An APK must be re-signed if any of the contents are removed.
apk的平台现在执行更严格的验证。APK被认为是腐败的,如果一个文件在清单中声明,而不是出现在APK文件本身。APK必须续签如果任何内容删除。
USB Connection
Device connections through the USB port are now set to charge-only mode by default. To access the device and its content over a USB connection, users must explicitly grant permission for such interactions. If your app supports user interactions with the device over a USB port, take into consideration that the interaction must be explicitly enabled.
设备通过USB端口连接现在默认设置为仅收取模式。访问设备通过USB连接和它的内容,用户必须显式地允许这种交互。如果您的应用程序支持用户交互设备通过USB端口,考虑到交互必须显式地启用。
Android for Work Changes
This release includes the following behavior changes for Android for Work:
这个版本包括以下行为变化为Android工作:

Work contacts in personal contexts. The Google Dialer Call Log now displays work contacts when the user views past calls. Setting setCrossProfileCallerIdDisabled() to true hides the work profile contacts in the Google Dialer Call Log. Work contacts can be displayed along with personal contacts to devices over Bluetooth only if you set setBluetoothContactSharingDisabled() to false. By default, it is set to true.
Wi-Fi configuration removal: Wi-Fi configurations added by a Profile Owner (for example, through calls to the addNetwork() method) are now removed if that work profile is deleted.
Wi-Fi configuration lockdown: Any Wi-Fi configuration created by an active Device Owner can no longer be modified or deleted by the user if WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN is non-zero. The user can still create and modify their own Wi-Fi configurations. Active Device Owners have the privilege of editing or removing any Wi-Fi configurations, including those not created by them.
Download device policy controller via Google account addition: When a Google account that requires management via a device policy controller (DPC) app is added to a device outside of a managed context, the add account flow now prompts the user to install the appropriate WPC. This behavior also applies to accounts added via Settings > Accounts and in the initial device setup wizard.
在个人背景联系工作。现在谷歌拨号器调用日志显示工作联系人电话过去当用户视图。设置setCrossProfileCallerIdDisabled()真正隐藏的工作概要文件在谷歌联系人拨号器调用日志。工作联系人可以显示连同个人联系在蓝牙设备只有在设置setBluetoothContactSharingDisabled()为false。默认情况下,它被设置为true。
无线网络配置删除:wi - fi配置添加一个配置文件的所有者(例如,通过调用addNetwork()方法)现在删除,如果工作概要文件被删除。
无线网络配置锁定:任何无线网络配置由一个活跃的设备所有者可以不再被修改或删除的用户如果WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN是非零的。用户还可以创建和修改自己的无线网络配置。活跃设备所有者的特权编辑或删除任何无线网络配置,包括那些没有创建。
下载设备政策控制器通过谷歌账户添加:当一个谷歌帐号,需要通过设备管理政策控制器(DPC)应用程序添加到设备管理上下文之外,添加账户流现在提示用户安装适当的女警官。这种行为也适用于账户通过设置>添加账户和在最初的设备安装向导。
Changes to specific DevicePolicyManager API behaviors:
改变特定DevicePolicyManager API行为:
Calling the setCameraDisabled() method affects the camera for the calling user only; calling it from the managed profile doesn’t affect camera apps running on the primary user.
In addition, the setKeyguardDisabledFeatures() method is now available for Profile Owners, as well as to Device Owners.
调用setCameraDisabled()方法调用用户只会影响相机;调用它从托管档案不影响相机应用程序运行在主用户。
此外,setKeyguardDisabledFeatures()方法现在可以为概要文件所有者,以及设备的主人。
A Profile Owner can set these keyguard restrictions:
KEYGUARD_DISABLE_TRUST_AGENTS and KEYGUARD_DISABLE_FINGERPRINT, which affect the keyguard settings for the profile’s parent user.
KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS, which only affects notifications generated by applications in the managed profile.
The createAndInitializeUser() and createUser() methods have been deprecated.
The setScreenCaptureDisabled() method now also blocks the assist structure when an app of the given user is in the foreground.
EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM now defaults to SHA-256. SHA-1 is still supported for backwards compatibility but will be removed in future. EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM now only accepts SHA-256.
Device initializer APIs which existed in the Android 6.0 (API level 23) are now removed.
EXTRA_PROVISIONING_RESET_PROTECTION_PARAMETERS is removed so NFC bump provisioning cannot programmatically unlock a factory reset protected device.
You can now use the EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE extra to pass data to the device owner app during NFC provisioning of the managed device.
Android for Work APIs are optimized for M runtime permissions, including Work profiles, assist layer, and others. New DevicePolicyManager permission APIs don't affect pre-M apps.
When users back out of the synchronous part of the setup flow initiated through an ACTION_PROVISION_MANAGED_PROFILE or ACTION_PROVISION_MANAGED_DEVICE intent, the system now returns a RESULT_CANCELED result code.
您现在可以使用EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE额外传递数据到设备所有者在NFC应用配置的设备管理。
Android api工作优化运行权限,包括工作档案,协助层,和其他人。新的DevicePolicyManager许可api不影响pre-M应用。
当用户退出同步的部分设置流量通过ACTION_PROVISION_MANAGED_PROFILE发起或ACTION_PROVISION_MANAGED_DEVICE意图,系统现在返回一个RESULT_CANCELED结果代码。
Changes to other APIs:
Data Usage: The android.app.usage.NetworkUsageStats class has been renamed NetworkStats.
Changes to global settings:
These settings can no longer be set via setGlobalSettings():
BLUETOOTH_ON
DEVELOPMENT_SETTINGS_ENABLED
MODE_RINGER
NETWORK_PREFERENCE
WIFI_ON
These global settings can now be set via setGlobalSettings():
WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN